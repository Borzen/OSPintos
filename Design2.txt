		           +--------------------------+
       	                   |         CIS 520          |
		           | PROJECT 2: USER PROGRAMS |
		           |     DESIGN DOCUMENT      |
		           +--------------------------+

---- GROUP ----

>> Fill in the names of your group members.

Austin Murphy
Matt Heart

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	We did not need to change or add any `struct' or `struct' member, global or static variable, `typedef', or enumeration. From the source code given in Pintos2, we only needed to modifiy the reverse algorithm.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

	We take in the command line string, store it in an array using strtok_r() to split the arguments for each index of the array. We then reverse the arguemnts by using two values, one for the lowest index and one for the highest index of the array, and swapping them. We then increment the low index and decrement the high index and swap. We continue until the indicies are the mid index of the array. Next we use the given push() to place the arguments, argument count, and null onto the stack. Push() will return null if we get a stack overflow. In the event of an overflow we shutdown the program.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

	Pintos uses strtok_r() instead of strtok() because strtok() modifies the actual string and is not thread safe, strtok_r() uses a pointer to move through the string and is thread safe.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

	The Unix approach removes the danger of multiple threads trying to parse a single input string. While strtok_r() also removes this danger in the programs, the Unix approach removes even the chance. Another advantage of the Unix approach is it lessens the demand on the kernel threads.  By doing the work for the program, the Unix method can parse exceptionally syntactically difficult strings without using the kernels resources.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct file_descriptor
  {
    struct list_elem elem;      /* List element. */
    struct file *file;          /* File. */
    int handle;                 /* File handle. */
  };

A discriptor for a open file in the process. 

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

	File_descriptors have a pointer to their associated open file, they are also assigned a handle to make them easy to lookup using lookup_fd(int handle), and they have a list_elem to associate the file with the thread using it.  File discriptors are unique within a system process as syscalls are only associated with a proccess. 

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

	For a file read from the kernal, we check the handle to see if the file is actually in the kernal. Then we read it from the buffer and return the size read in.  For a write, we place the data to be written into a buffer and then return the number of bytes writen.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

it checks to see if the file is already in the virtual address. Then it is passed back by returning -1. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantanges to our implematation of file discriptors is that they are easy to lookup but yet complex enough to get the job done. 
A major disavantage is that they are linked to the process and not the filesystem as a whole.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
