CIS 520 - Programming Project #1

                   
---- GROUP ----


Austin Murphy <Borzen@k-state.edu>
Matt Hart <mshart@k-state.edu>


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */
    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
    //Sleep semaphore
    struct semaphore sema_sleep;
    //sleep ticks
    int64_t ticks_sleep;
#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

	Added an int_64 ticks_sleep to keep track of how long the thread needs to sleeps.
	Added a semaphore sema_sleep to serve as a binary semaphore to control 
		when the thread sleeps.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.
	When the program calls timer_sleep(), it checks if the number of ticks is > 0.
	This is used for an optimization in timer_interrupt. Timer_sleep() then initializes 
	the thread's sema_sleep with a value of 0, it initializes ticks_sleep to the passed in 
	number of ticks, and the it calls sema_down on the current thread's  sema_sleep. 
	Sema_down blocks the current thread until sema_up is called.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
	The timer_interrupt handler calls a wake_sleeping_thread function for each thread.
	This funtion runs if the thread is blocked and the thread was blocked using timer_sleep()
	We guarantee the second conditions by checking if  the threads ticks_sleep >0.  Currently, 
	timer_ticks can only be assigned a value > 0 in timer_sleep. We further reduce time spent in
	the interrupt by only decrementing the valid threads once, without using a loop.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
	We use thread_current()->sema_sleep to get the thread that called timer_sleep(). 
	if another thread called timer_sleep at the same time, then thread_current() will switch 
	accordingly and avoid sleeping the wrong thread.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
	We use sema_up and sema_down to control locking and unlocking the thread.  Sema_up can only
	be called from the interrupt if the thread was locked using timer_sleep. If timer_interrupt
	is called during timer_sleep, both conditions to be "put to sleep" will not be valid: the 		ticks_sleep will be > 0, but the thread hasn't been block yet by sema_down. After the 
	interrupt finishes, sema_down would be called, locking the thread and allowing the interrupt
	to call wake_sleeping_threads on the next tick.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

	We choose this method because it was easy to implement and it would ensure synchronization.
	Another option we considered was to give each thread a semaphore, initialize the semaphore to
	to the tick value in timer_sleep, and then manually block the semaphore.  We would then use 
	a function very similar to wake_sleeping_threads to call sema_try_down on the blocked threads.
	Once sema_try_down returned false, we would call sema_up to wake the sleeping threads.

	Our design provided better synchronization because it had a second variable to help controll 
	when how we wake the threads.  By using ticks_sleep to ensure that timer_sleep blocked the
	thread,	we guaranteed we didn't accidentally wake up a thread that was blocked by a different 		method.



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
	struct thread
	  {
	    /* Owned by thread.c. */
	    tid_t tid;                          /* Thread identifier. */
	    enum thread_status status;          /* Thread state. */
	    char name[16];                      /* Name (for debugging purposes). */
	    uint8_t *stack;                     /* Saved stack pointer. */
	    int priority;                       /* Priority. */
	    int basePriority;
	    struct list_elem allelem;           /* List element for all threads list. */
	    /* Shared between thread.c and synch.c. */
	    struct list_elem elem;              /* List element. */
	    struct list_elem blockedElem;     /* threads that donated their priority */
	    struct list_elem waiterElem;	/* element used to store in wait list */
	    struct list blockedList;	        /*list of elements blocked by this thread*/
	    struct thread* blockedBy;
	    //Sleep semaphore
	    struct semaphore sema_sleep;
	    //sleep ticks
	    int64_t ticks_sleep;
	#ifdef USERPROG
	    /* Owned by userprog/process.c. */
	    uint32_t *pagedir;                  /* Page directory. */
	#endif

	    /* Owned by thread.c. */
	    unsigned magic;                     /* Detects stack overflow. */
	  };

	struct lock 
	  {
	    struct thread *holder;      /* Thread holding lock (for debugging). */
	    struct semaphore semaphore; /* Binary semaphore controlling access. */
	    struct list waiters;
	  };


>> B2: Explain the data structure used to track priority donation.
	For struct thread, We used a list to store the threads blocked by the current thread. This allows us to
	calculate the priority using recursive donations.
	We added a waiter element for the waiters list in the struct lock.

	To struct lock, we added a list to store the threads waiting on this lock.  This allows us to pass the waiters
	from one thread to the thread with the next highest priority in waiters.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

To ensure that the highest priority thread is the next thread to run, wake up, or unblock, we use function that gets the thread with the highest priority, remove it from the list in the lock/semaphore, and unblock the thread. We use this "get max" function in sema_up, lock_release, and next_thread_to_run.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

First we follow the ASSERTS from the original source code, then we make sure interrupts are disabled. Next we get the current thread and the thread that holds the lock.  We then check if the lock holder is not null and check if the holder's priority is less than the current thread's priority. If these statements are true, we donate the current 
thread's priority to the lock holder's priority and add the current thread to the list of waiters on the lock.
Else if there is simply a lock holder, we add the thread to the list of waiters

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A race condition that could occour is that multiple threads are chaging their priority and then yealding. 
Our implementation avoids this as we put a lock around the yealing functions. 
A lock could help out as it keeps the thread from changing its priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose this option as we would not have to re-sort a list or re-set a priority of a thread.

Other options we concidered was to re-set the values of each chaged thread every time we need to reset the values. 
The reason we did not go this way was every time to recall the threads if a priority was chaged would eat up time and then make everything seem slow.


              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

